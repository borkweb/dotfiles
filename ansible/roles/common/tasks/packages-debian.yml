---
- name: Detect system Python interpreter with apt support
  raw: |
    for python in /usr/bin/python3 /usr/bin/python3.* /bin/python3; do
      if [ -x "$python" ] && $python -c "import apt" 2>/dev/null; then
        echo "$python"
        exit 0
      fi
    done
    # If no Python with apt found, return system python3
    echo "/usr/bin/python3"
  args:
    executable: /bin/bash
  register: detected_python
  changed_when: false

- name: Set ansible_python_interpreter to detected Python
  set_fact:
    ansible_python_interpreter: "{{ detected_python.stdout | trim }}"

- name: Bootstrap python3-apt for system Python (if needed)
  raw: |
    if ! dpkg -l python3-apt 2>/dev/null | grep -q '^ii'; then
      apt-get update
      DEBIAN_FRONTEND=noninteractive apt-get install -y python3-apt
    fi
  args:
    executable: /bin/bash
  become: true
  changed_when: false

- name: Update apt cache
  apt:
    update_cache: true
    cache_valid_time: 3600
  become: true
  when: install_packages | bool

- name: Install core packages (Debian/Ubuntu)
  apt:
    name:
      - git
      - curl
      - wget
      - tree
      - build-essential
      - gpg
      - ffmpeg
      - subversion
    state: present
  become: true
  when: install_packages | bool

- name: Install Node.js packages (Debian/Ubuntu)
  apt:
    name:
      - nodejs
      - npm
    state: present
  become: true
  when: install_packages | bool
  ignore_errors: true
  register: nodejs_result

- name: Display Node.js installation status
  debug:
    msg: "Node.js installation {{ 'succeeded' if nodejs_result is succeeded else 'failed - may already be installed from NodeSource' }}"
  when: install_packages | bool

- name: Install hub (Debian/Ubuntu)
  apt:
    name: hub
    state: present
  become: true
  when: install_packages | bool
  ignore_errors: true
  register: hub_result

- name: Display hub installation status
  debug:
    msg: "Hub installation {{ 'succeeded' if hub_result is succeeded else 'failed - skipping' }}"
  when: install_packages | bool

- name: Add 1Password GPG key (Debian/Ubuntu)
  shell: curl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --dearmor -o /usr/share/keyrings/1password-archive-keyring.gpg
  args:
    creates: /usr/share/keyrings/1password-archive-keyring.gpg
  become: true
  when:
    - install_packages | bool
    - ansible_os_family == "Debian"

- name: Add 1Password repository (Debian/Ubuntu)
  copy:
    content: "deb [arch=amd64 signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main\n"
    dest: /etc/apt/sources.list.d/1password.list
    mode: '0644'
  become: true
  when:
    - install_packages | bool
    - ansible_os_family == "Debian"

- name: Add 1Password repository policy (Debian/Ubuntu)
  copy:
    content: |
      Package: *
      Pin: origin downloads.1password.com
      Pin-Priority: 1000
    dest: /etc/apt/preferences.d/1password
    mode: '0644'
  become: true
  when:
    - install_packages | bool
    - ansible_os_family == "Debian"

- name: Update apt cache for 1Password
  apt:
    update_cache: true
    cache_valid_time: 0
  become: true
  when:
    - install_packages | bool
    - ansible_os_family == "Debian"

- name: Install 1Password CLI (Debian/Ubuntu)
  apt:
    name: 1password-cli
    state: present
  become: true
  when:
    - install_packages | bool
    - ansible_os_family == "Debian"

- name: Install Claude Code CLI
  shell: curl -fsSL https://claude.ai/install.sh | bash
  args:
    creates: "{{ ansible_env.HOME }}/.local/bin/claude"
  when: install_packages | bool

- name: Install bun (Debian/Ubuntu)
  shell: curl -fsSL https://bun.sh/install | bash
  args:
    creates: "{{ ansible_env.HOME }}/.bun/bin/bun"
  when:
    - install_packages | bool
    - ansible_os_family == "Debian"
